#!/usr/bin/env bash
set -euo pipefail


### VARIABLES and PWD #########################################################

PROJECT_NAME="leihs-ui"

PROJECT_DIR="$(cd -- "$(dirname "${BASH_SOURCE}")" > /dev/null 2>&1 ; cd .. ; pwd -P)"
ARTEFACT_NAME="$PROJECT_NAME"
ARTEFACT_PATHS="./dist ./bootstrap-theme-leihs/build ./borrow-theme/build"
DIGEST="$(git -C "$PROJECT_DIR" log -n 1 HEAD --pretty=%T)"
LOCAL_CACHE_DIR="${LOCAL_CACHE_DIR:-"${TMPDIR:-/tmp/}/leihs-build-cache"}"
LOCAL_CACHED_ARTEFACT_PATH="${LOCAL_CACHE_DIR}/${ARTEFACT_NAME}_${DIGEST}.tgz"
BUILD_CACHE_DISABLED="${BUILD_CACHE_DISABLED:-NO}"

cd "${PROJECT_DIR}"
echo "PWD: $PWD"

if [ $BUILD_CACHE_DISABLED == "YES" ] ||  [ $BUILD_CACHE_DISABLED == "NO" ]; then
  echo "BUILD_CACHE_DISABLED=$BUILD_CACHE_DISABLED"
  mkdir -p "$LOCAL_CACHE_DIR"
else
  echo 'BUILD_CACHE_DISABLED must be unset, or "YES", or "NO"'
  exit 1
fi

### functions #################################################################

function build {
  ./bin/build-core || { echo "build error!"; exit 1; }
}

function pack {
  # NOTE: only move to final destination after packing is done, to not create invalid archives when the script is aborted
  TMP_TAR_FILE="$(mktemp -t "${PROJECT_NAME}.XXXXXXX")"
  tar -cvz -f "$TMP_TAR_FILE" $ARTEFACT_PATHS \
  && mv "$TMP_TAR_FILE" "$LOCAL_CACHED_ARTEFACT_PATH"
}

function extract {
  ./bin/build-symlinks
  tar -xvz -f "$LOCAL_CACHED_ARTEFACT_PATH"
}


### MAIN ######################################################################

if [ $BUILD_CACHE_DISABLED == "YES" ]; then
  echo "INFO: BUILD_CACHE_DISABLED is YES, building and nothing else"
  build
else
  source ./bin/require-clean-working-tree.sh
  require-clean-working-tree
  echo "LOCAL_CACHED_ARTEFACT_PATH: $LOCAL_CACHED_ARTEFACT_PATH"
  if [ -e $LOCAL_CACHED_ARTEFACT_PATH ]; then
    echo "INFO: locally cached artefact found, extracting, and caching ..."
    extract
  else
    build
    pack
  fi
fi

cd -

echo "OK âœ”"

# vi: ft=sh
