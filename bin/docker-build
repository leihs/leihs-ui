#!/bin/bash
set -exu

# NOTE: this works exactly like `bin/build`, but runs inside a docker container.

UI_IMAGE_NAME="${UI_IMAGE_NAME:-leihs-ui}"
VERSION_NAME="${VERSION_NAME:-dev}"
STAGE="${STAGE:-dist}"
IMAGE_WORKDIR="/leihs-ui"
DIST_DIR="dist"
THEME_DIR="bootstrap-theme-leihs/build"
THEME_MOBILE_DIR="bootstrap-theme-leihs-mobile/build"

# short tree hash - does only change when the content changes
git_tree="$(git log -n1 --format="%t" HEAD)"
# long git commit hash – useful because it can be know from parent repo with initializing the submodule
git_commit="$(git log -n1 --format="%H" HEAD)"
tag="${UI_IMAGE_NAME}:${VERSION_NAME}"

docker buildx build \
  --build-arg "WORKDIR=${IMAGE_WORKDIR}" \
  --target "$STAGE" \
  -t "$tag" \
  -f Dockerfile .

# add more tags based on git state, if the working tree is clean
source bin/require-clean-working-tree
if check-clean-working-tree; then
  main_tag="${UI_IMAGE_NAME}:tree-${git_tree}"
  docker image tag "$tag" "$main_tag"
  docker image tag "$tag" "${UI_IMAGE_NAME}:commit-${git_commit}"
  # print this as the "main" tag
  tag="$main_tag"
fi

# extract dist from image / copy to host filesystem (might fail if a stage is built that does not include dist)
rm -rf "${DIST_DIR}" && mkdir -p "${DIST_DIR}"
container_id="$(docker create "$tag" .)"
docker cp -La "$container_id:${IMAGE_WORKDIR}/${DIST_DIR}/." "${DIST_DIR}/"
docker cp -La "$container_id:${IMAGE_WORKDIR}/${THEME_DIR}/." "${THEME_DIR}/"
docker cp -La "$container_id:${IMAGE_WORKDIR}/${THEME_MOBILE_DIR}/." "${THEME_MOBILE_DIR}/"
docker rm "$container_id"
ls -la "${DIST_DIR}"

echo "${tag}"
