// btn
.btn-icon {
  user-select: none;
}
.btn-icon:focus {
  outline: none;
}

// util - sizing
.minh-100 {
  min-height: 100%;
}

.minw-100 {
  min-width: 100%;
}

// .form-group-sm, based on .form-control-sm
.form-group.form-group-sm {
  margin-bottom: map-get($spacers, 2) !important;
  & + .form-group {
    margin-top: map-get($spacers, 3);
  }
  & + & {
    margin-top: 0;
  }

  label {
    @extend small;
    margin-bottom: map-get($spacers, 1) !important;
  }
  .form-control.form-control-plaintext {
    @extend .form-control-plaintext.form-control-sm;
  }
  .form-control {
    @extend .form-control-sm;
  }
}

// custom controls

// for custom (react) inputs, where the state and validation state is already managed,
// we can use much more flexible HTML, e.g. `custom-control-mark-invalid` (instead of `:invalid`,
// which only works on some possibly nested `<input/>`, making sibling of ancestors like
// `.invalid-feedback` *impossible* to style otherwise).
@mixin custom-control-form-validation-state-selector($state) {
  @if ($state == "valid" or $state == "invalid") {
    .was-validated .custom-control-mark-#{$state} #{if(&, "&", "")},
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  } @else {
    .custom-control-mark-#{$state} #{if(&, "&", "")},
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  }
}
.custom-control-focussed {
  // NOTE: from bootstrap/mixing/_forms
  color: $input-focus-color !important;
  background-color: $input-focus-bg !important;
  border-color: $input-focus-border-color !important;
  outline: 0 !important;
  @if $enable-shadows {
    @include box-shadow($input-box-shadow, $input-focus-box-shadow);
  } @else {
    // Avoid using mixin so we can pass custom focus shadow properly
    box-shadow: $input-focus-box-shadow !important;
  }
}


// datepicker custom control
.custom-datepicker {
  .custom-datepicker-textinput, .custom-datepicker-calendar-container {
    // NOTE: from bootstrap's .form-control
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  }
  & .custom-control-focussed {
    .custom-datepicker-textinput, .custom-datepicker-calendar-container {
      border-color: $input-focus-border-color !important;
    }
    .custom-datepicker-textinput {
      box-shadow: none !important;
    }
  }
  // calendar
  .rdrMonthAndYearWrapper {
    padding-top: 0;
  }
}

@mixin custom-datepicker-form-validation-state($state, $color, $icon) {
  .custom-datepicker {
    @include custom-control-form-validation-state-selector($state) {
      & .#{$state}-feedback,
      & .#{$state}-tooltip {
        display: block;
      }
    }
  }
  .custom-datepicker-calendar-container {

    @include custom-control-form-validation-state-selector($state) {
      border-color: $color;

      & .custom-control-focussed {
        .custom-datepicker-textinput, .custom-datepicker-calendar-container {
          border-color: $color;
          box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
        }
      }
    }
  }
}
@each $state, $data in $form-validation-states {
  @include custom-datepicker-form-validation-state($state, map-get($data, color), map-get($data, icon));
}